/* LPLParser.java */
/* Generated By:JavaCC: Do not edit this line. LPLParser.java */
  package lpl.parser;

import lpl.ast.*;
import java.lang.invoke.VarHandle;import java.util.*;

public class LPLParser implements LPLParserConstants {

  final public Program nt_Program() throws ParseException {FunDef mainDef, fd;
  List<FunDef> fds = new LinkedList<FunDef>();
    mainDef = nt_FunDef();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      fd = nt_FunDef();
fds.add(fd);
    }
    jj_consume_token(0);
{if ("" != null) return new Program(mainDef, fds);}
    throw new Error("Missing return statement in function");
}

  final public FunDef nt_FunDef() throws ParseException {List<Formal> fs = new LinkedList<Formal>();
  List<VarDecl> vs = new LinkedList<VarDecl>();
  List<Stm> ss = new LinkedList<Stm>();
  Type type;
  Token token;
  VarDecl v;
  Stm stm;
    jj_consume_token(DEF);
    type = nt_Type();
    token = jj_consume_token(ID);
    jj_consume_token(LBR);
    fs = nt_FormalList();
    jj_consume_token(RBR);
    jj_consume_token(LCBR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOL:
      case UNIT:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      v = nt_VarDecl();
vs.add(v);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBR:
      case LCBR:
      case ISNULL:
      case OUTPUT:
      case OUTCHAR:
      case RETURN:
      case NEW:
      case IF:
      case WHILE:
      case NOT:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      stm = nt_Statement();
ss.add(stm);
    }
    jj_consume_token(RCBR);
{if ("" != null) return new FunDef(type,token.image,fs,vs,ss);}
    throw new Error("Missing return statement in function");
}

  final public List<Formal> nt_FormalList() throws ParseException {Formal f;
  List<Formal> fs = new LinkedList<Formal>();
  Type type;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOL:
    case UNIT:{
      type = nt_Type();
      t = jj_consume_token(ID);
f = new Formal(type, t.image); fs.add(f);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        f = nt_FormalRest();
fs.add(f);
      }
{if ("" != null) return fs;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;

{if ("" != null) return fs;}
    }
    throw new Error("Missing return statement in function");
}

  final public Formal nt_FormalRest() throws ParseException {Type type;
 Token t;
    jj_consume_token(COMMA);
    type = nt_Type();
    t = jj_consume_token(ID);
{if ("" != null) return  new Formal(type,t.image);}
    throw new Error("Missing return statement in function");
}

  final public Type nt_Type() throws ParseException {Type type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
type = new TypeInt();
      label_5:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(LSBR);
        jj_consume_token(RSBR);
type = new TypeArray(type);
      }
{if ("" != null) return type;}
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
type =  new TypeBoolean();
      label_6:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(LSBR);
        jj_consume_token(RSBR);
type = new TypeArray(type);
      }
{if ("" != null) return type;}
      break;
      }
    case UNIT:{
      jj_consume_token(UNIT);
type = new TypeUnit();
      label_7:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(LSBR);
        jj_consume_token(RSBR);
type = new TypeArray(type);
      }
{if ("" != null) return type;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public VarDecl nt_VarDecl() throws ParseException {Type type;
 Token t;
    type = nt_Type();
    t = jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
{if ("" != null) return new VarDecl(type,t.image);}
    throw new Error("Missing return statement in function");
}

  final public Stm nt_Statement() throws ParseException {List<Stm> ss = new LinkedList<Stm>();
 List<Exp> es = new LinkedList<Exp>();
 Exp exp;
 Exp exp1;
 Stm stm;
 Stm stm1;

 PrimaryExp p;
 Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LCBR:{
      jj_consume_token(LCBR);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBR:
        case LCBR:
        case ISNULL:
        case OUTPUT:
        case OUTCHAR:
        case RETURN:
        case NEW:
        case IF:
        case WHILE:
        case NOT:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_8;
        }
        stm = nt_Statement();
ss.add(stm);
      }
      jj_consume_token(RCBR);
{if ("" != null) return new StmBlock(ss) ;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_4(2)) {
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUALS:{
          jj_consume_token(EQUALS);
          exp = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmAssign(t.image, exp);}
          break;
          }
        case LBR:{
          jj_consume_token(LBR);
          es = nt_ExpList();
          jj_consume_token(RBR);
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmCall(t.image,es) ;}
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBR:
        case ISNULL:
        case NEW:
        case NOT:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case ID:{
          p = nt_PrimaryExp();
          jj_consume_token(LSBR);
          exp = nt_Exp();
          jj_consume_token(RSBR);
          jj_consume_token(EQUALS);
          exp1 = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmArrayAssign(p,exp,exp1);}
          break;
          }
        case IF:{
          jj_consume_token(IF);
          jj_consume_token(LBR);
          exp = nt_Exp();
          jj_consume_token(RBR);
          stm = nt_Statement();
          jj_consume_token(ELSE);
          stm1 = nt_Statement();
{if ("" != null) return new StmIf(exp,stm,stm1);}
          break;
          }
        case WHILE:{
          jj_consume_token(WHILE);
          jj_consume_token(LBR);
          exp = nt_Exp();
          jj_consume_token(RBR);
          stm = nt_Statement();
{if ("" != null) return new StmWhile(exp,stm);}
          break;
          }
        case OUTPUT:{
          jj_consume_token(OUTPUT);
          exp = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmOutput(exp);}
          break;
          }
        case OUTCHAR:{
          jj_consume_token(OUTCHAR);
          exp = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmOutchar(exp);}
          break;
          }
        case RETURN:{
          jj_consume_token(RETURN);
          exp = nt_Exp();
          jj_consume_token(SEMICOLON);
{if ("" != null) return new StmReturn(exp);}
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  final public Exp nt_Exp() throws ParseException {Token t;
 Op op;
 List<Exp> es = new LinkedList<Exp>();
 Exp exp;
 PrimaryExp p;
 PrimaryExp p1;
    if (jj_2_5(3)) {
      t = jj_consume_token(ID);
      jj_consume_token(LBR);
      es = nt_ExpList();
      jj_consume_token(RBR);
{if ("" != null) return new ExpCall(t.image,es);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBR:
      case ISNULL:
      case NEW:
      case NOT:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case ID:{
        p = nt_PrimaryExp();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:
        case OR:
        case LESSTHAN:
        case EQUALTO:
        case DIVIDE:
        case PLUS:
        case MINUS:
        case MULTIPLY:{
          op = nt_Op();
          p1 = nt_PrimaryExp();
{if ("" != null) return new ExpOp(p,op,p1);}
          break;
          }
        case LSBR:{
          jj_consume_token(LSBR);
          exp = nt_Exp();
          jj_consume_token(RSBR);
{if ("" != null) return new ExpArrayLookup(p,exp);}
          break;
          }
        case LENGTH:{
          jj_consume_token(LENGTH);
{if ("" != null) return new ExpArrayLength(p) ;}
          break;
          }
        default:
          jj_la1[10] = jj_gen;
{if ("" != null) return new ExpPrimaryExp(p);}
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public Op nt_Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
{if ("" != null) return Op.AND;}
      break;
      }
    case OR:{
      jj_consume_token(OR);
{if ("" != null) return Op.OR;}
      break;
      }
    case LESSTHAN:{
      jj_consume_token(LESSTHAN);
{if ("" != null) return Op.LESSTHAN;}
      break;
      }
    case EQUALTO:{
      jj_consume_token(EQUALTO);
{if ("" != null) return Op.EQUALS;}
      break;
      }
    case DIVIDE:{
      jj_consume_token(DIVIDE);
{if ("" != null) return Op.DIV;}
      break;
      }
    case MULTIPLY:{
      jj_consume_token(MULTIPLY);
{if ("" != null) return Op.TIMES;}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
{if ("" != null) return Op.PLUS;}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
{if ("" != null) return Op.MINUS;}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public PrimaryExp nt_PrimaryExp() throws ParseException {Token t;
 Type type;
 Exp exp;
 PrimaryExp p;
    if (jj_2_6(3)) {
      t = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return new PrimaryExpInteger(Integer.parseInt(t.image));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
{if ("" != null) return new PrimaryExpTrue();}
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
{if ("" != null) return new PrimaryExpFalse();}
        break;
        }
      case ID:{
        t = jj_consume_token(ID);
{if ("" != null) return new PrimaryExpVar(t.image);}
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        type = nt_Type();
        jj_consume_token(LSBR);
        exp = nt_Exp();
        jj_consume_token(RSBR);
{if ("" != null) return new PrimaryExpNewArray(type, exp);}
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        p = nt_PrimaryExp();
{if ("" != null) return new PrimaryExpNot(p);}
        break;
        }
      case ISNULL:{
        jj_consume_token(ISNULL);
        p = nt_PrimaryExp();
{if ("" != null) return new PrimaryExpIsnull(p);}
        break;
        }
      case LBR:{
        jj_consume_token(LBR);
        exp = nt_Exp();
        jj_consume_token(RBR);
{if ("" != null) return new PrimaryExpExp(exp);}
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public List<Exp> nt_ExpList() throws ParseException {Exp e;
 List<Exp> elst = new LinkedList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBR:
    case ISNULL:
    case NEW:
    case NOT:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case ID:{
      // TODO: test
        e = nt_Exp();
elst.add(e);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        e = nt_ExpRest();
elst.add(e);
      }
{if ("" != null) return elst;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;

{if ("" != null) return elst ;}
    }
    throw new Error("Missing return statement in function");
}

  final public Exp nt_ExpRest() throws ParseException {Exp e;
    jj_consume_token(COMMA);
    e = nt_Exp();
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(LBR)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(ISNULL)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(LSBR)) return true;
    if (jj_scan_token(RSBR)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(LBR)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(LSBR)) return true;
    if (jj_scan_token(RSBR)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(LSBR)) return true;
    if (jj_scan_token(RSBR)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBR)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(RBR)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LPLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x4000,0x1a0000,0x3be48500,0x0,0x1a0000,0x1a0000,0x3be48500,0x100,0x400,0x3be48100,0x80011000,0x38808100,0x80000000,0x38808100,0x0,0x38808100,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x600,0x100,0x0,0x0,0x600,0x8,0x0,0x600,0xf7,0x600,0xf7,0x400,0x100,0x600,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LPLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LPLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LPLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LPLParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LPLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LPLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LPLParser(LPLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LPLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[43];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 16; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 43; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

  // JavaCC will generate the body of this class
}
